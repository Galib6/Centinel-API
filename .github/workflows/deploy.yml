name: Management API Production CLI

on:
  push:
    branches: [main]

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create environment folder and generate production.env
        run: |
          mkdir -p environments
          echo "PORT=9000" > environments/production.env
          echo "APP_ENV=production" >> environments/production.env
          echo "NODE_ENV=production" >> environments/production.env
          echo "API_PREFIX=api/v1" >> environments/production.env
          echo "API_BASE_URL=https://centinel-api.asadullahalgalib.tech" >> environments/production.env
          echo "TZ=UTC" >> environments/production.env

          echo "# Swagger" >> environments/production.env
          echo "API_VERSION=1.0.0" >> environments/production.env
          echo "API_TITLE=Centinel Api" >> environments/production.env
          echo "API_DESCRIPTION=Nest js learning" >> environments/production.env

          echo "# Default DB" >> environments/production.env
          echo "DB_TYPE=postgres" >> environments/production.env
          echo "DB_HOST=${{ secrets.PROD_DATABASE_HOST }}" >> environments/production.env
          echo "DB_PORT=${{ secrets.PROD_DATABASE_PORT }}" >> environments/production.env
          echo "DB_USERNAME=${{ secrets.PROD_DATABASE_USERNAME }}" >> environments/production.env
          echo "DB_PASSWORD=${{ secrets.PROD_DATABASE_PASSWORD }}" >> environments/production.env
          echo "DB_DATABASE=${{ secrets.PROD_DATABASE_NAME }}" >> environments/production.env
          echo "DB_SYNCHRONIZE=true" >> environments/production.env
          echo "DATABASE_AUTOLOAD=true" >> environments/production.env
          echo "DB_LOGGING=false" >> environments/production.env

          echo "# Security" >> environments/production.env
          echo "CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:4200" >> environments/production.env
          echo "RATE_LIMIT_TTL=60000" >> environments/production.env
          echo "RATE_LIMIT_MAX=100" >> environments/production.env

          echo "# Logger" >> environments/production.env
          echo "LOG_FOLDER=logs" >> environments/production.env

          echo "# JWT" >> environments/production.env
          echo "JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}" >> environments/production.env
          echo "JWT_SALT_ROUNDS=10" >> environments/production.env
          echo "JWT_EXPIRES_IN=1d" >> environments/production.env
          echo "JWT_REFRESH_TOKEN_EXPIRES_IN=30d" >> environments/production.env
          echo "JWT_TOKEN_AUDIENCE=localhost:9000" >> environments/production.env
          echo "JWT_TOKEN_ISSUER=localhost:9000" >> environments/production.env

          echo "# Auth" >> environments/production.env
          echo "OTP_EXPIRES_IN=5000" >> environments/production.env

          echo "# Storage" >> environments/production.env
          echo "FILE_STORAGE=s3" >> environments/production.env
          echo "FILE_STORAGE_LOCAL_BASE=http://localhost:9000" >> environments/production.env

          echo "# S3" >> environments/production.env
          echo "S3_ENDPOINT=https://sgp1.digitaloceanspaces.com" >> environments/production.env
          echo "S3_ACCESS_KEY=${{ secrets.PROD_S3_ACCESS_KEY }}" >> environments/production.env
          echo "S3_SECRET_KEY=${{ secrets.PROD_S3_SECRET_KEY }}" >> environments/production.env
          echo "S3_BUCKET=${{ secrets.PROD_S3_BUCKET }}" >> environments/production.env
          echo "S3_REGION=sgp1" >> environments/production.env

          echo "# SMTP" >> environments/production.env
          echo "SMTP_HOST=${{ secrets.PROD_SMTP_HOST }}" >> environments/production.env
          echo "SMTP_PORT=${{ secrets.PROD_SMTP_PORT }}" >> environments/production.env
          echo "SMTP_USERNAME=${{ secrets.PROD_SMTP_USERNAME }}" >> environments/production.env
          echo "SMTP_PASSWORD=${{ secrets.PROD_SMTP_PASSWORD }}" >> environments/production.env

      - name: Print production.env
        run: cat environments/production.env

      - name: Logging to DockerHub
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USER }}/centinel-api:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USER }}/centinel-api:latest

  Deploy:
    needs: Build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Logging to docker
        run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

      - name: Deploy To Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          password: ${{ secrets.PROD_PASSWORD }}
          script: |
            echo "Logging to docker hub"
            docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

            echo "Stopping previous build"
            docker stop centinel-api

            echo "Removing previous build"
            docker rm centinel-api

            echo "Removing old image from local"
            docker rmi ${{secrets.DOCKER_USER}}/centinel-api:latest

            echo "Pulling latest image from docker hub"
            docker pull ${{secrets.DOCKER_USER}}/centinel-api:latest

  Run:
    needs: Deploy

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Logging to docker
        run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

      - name: Deploy To Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          password: ${{ secrets.PROD_PASSWORD }}
          script: |
            echo "Logging to docker hub"
            docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

            echo "Starting latest build"
            docker run -e NODE_ENV=production -d \
              --restart always \
              -dit --name centinel-api \
              -p 9000:9000 \
              --name centinel-api \
              ${{secrets.DOCKER_USER}}/centinel-api:latest

            echo "Deploy Done"
